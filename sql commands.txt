SQL COMMANDS:
1) UNIQUE : This is used to merge the results of two select clause togther.
2) LIMIT : This is used to show the number of results equal to LIMIT if there are many number of values returned.( only used for MYSQL).
3) OFFSET : This is used with LIMIT as LIMIT x OFFSET y where it excudes the first y values and then show x values, here offset value cant be negative but can be zero or some +ve value
	    This should be always be used with ORDER BY clause.
4) ASC : used for ascending order
5) DESC : used for descending order
6) ROWNUM : to use in place of limit as there is no LIMIT in Oracle datebase... we have to use sub query to use it for eg:
		select city from ( select city, length(city) from station where order by length(city),city asc) where rownum < 2;
7)LENGTH(CITY): this is used to find the length of the data given like city names,etc.
8)UNION ALL: This is used to print the values of multiple select queries with duplicate values.
===============================================================================================================================================================================
				REGULAR EXPRESSIONS
Regular expression is used to find patterns in string or text values.The “expression” is made up of special characters, which have their own meaning.

They can be used to:

*)Check phone number formats
*)Check email address formats
*)Check URLs match a specific format
*)Check any other type of string value to see if it matches a desired format.

Regular Expressions are used to to short the code ... they are used to find a pattern in the data.
Here are some of the regular expressions syntax and code that we will use :
===============================================================================================================
1)REGEXP_LIKE : REGEXP_LIKE(<source_string>,<pattern>,<match_pattern>)
		*)The REGEXP_LIKE function searches a column for a specified pattern. It’s used in a WHERE clause to check if a column matches a pattern, 
		and if it does, then the row is included in the result set.
match_parameter:
		*)“i”: case-insensitive matching
		*)“c”: case-sensitive matching
		*)“n”: allows the “.” character to match the newline character instead of any character
		*)“m”: treats the source_string value as multiple lines, where ^ is the start of a line and $ is the end of a line.
NOTE:
1)If you specify multiple match_parameter values that contradict each other (e.g. “ci” which matches to case-sensitive and case-insensitive), then Oracle uses the last value. In this example, it will use “i” instead of “c”.

2)If you don’t specify a match parameter, then:
*)The default case sensitivity is determined by the parameter NLS_SORT.
*)The period character doesn’t match the newline character
*)The source string is treated as a single line and not multiple lines.
=================================================================================================================			

2)REGEXP_INSTR: REGEXP_INSTR(<source_string>, <pattern>[
				[,<start_position>][, <occurrence>]
				[, <return_option>][,<match_parameter>]
				[, <sub_expression>]])

3)REGEXP_SUBSTR	: REGEXP_SUBSTR(source_string, pattern
				[, position [, occurrence
				[, match_parameter]]])

4)REGEXP_REPLACE: REGEXP_REPLACE(<source_string>, <pattern>,
				<replace_string>, <position>, <occurrence>,
				<match_parameter>)

5)REGEXP_COUNT:	REGEXP_COUNT(<source_string>, <pattern>[[,
			     <start_position>], [<match_parameter>]])

===========================================================================================


.	Matches any single character
x?	Matches ‘x’ 0 or 1 times
x*	Matches ‘x’ 0 or more times
x+	Matches ‘x’ 1 or more times
x|y	Matches either ‘x’ or ‘y’
x{n}	Matches ‘x’ exactly n
times.
x{n,m}	Matches ‘x’ at least n
times, but no more than m times
x{n,}	Matches ‘x’ at least n
times
[xyz]	Matches ‘x’,’y’ or ‘z’
[^xyz]	Matches any single character other than ‘x’,’y’ and ‘z’
(xyz)	Takes ‘xyz’ as a group, rather than individual characters
a-z	Matches any character from ‘a’ to ‘z’

REGEXP_LIKE (email_address, '[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}');



Use of symbols : 
1) ^ : Beginning of line anchor
2) $ : End of line anchor
3) | : Or ... that is matches either one of the alternatives
4) 
